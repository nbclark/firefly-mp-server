#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Reflection;

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "gameserver")]
    public partial class GameServer : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertGameDevice(GameDevice instance);
        partial void UpdateGameDevice(GameDevice instance);
        partial void DeleteGameDevice(GameDevice instance);
        partial void InsertGame(Game instance);
        partial void UpdateGame(Game instance);
        partial void DeleteGame(Game instance);
        partial void InsertGameState(GameState instance);
        partial void UpdateGameState(GameState instance);
        partial void DeleteGameState(GameState instance);
        #endregion

        public GameServer(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public GameServer(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public GameServer(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public GameServer(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<GameDevice> GameDevices
        {
            get
            {
                return this.GetTable<GameDevice>();
            }
        }

        public System.Data.Linq.Table<Game> Games
        {
            get
            {
                return this.GetTable<Game>();
            }
        }

        public System.Data.Linq.Table<GameState> GameStates
        {
            get
            {
                return this.GetTable<GameState>();
            }
        }

        [Function(Name = "dbo.GameDeleteCommand")]
        [return: Parameter(DbType = "Int")]
        public int GameDeleteCommand([Parameter(Name = "Original_pkGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGame, [Parameter(Name = "Original_User", DbType = "NVarChar(50)")] string original_User, [Parameter(Name = "Original_Latitude", DbType = "Float")] System.Nullable<double> original_Latitude, [Parameter(Name = "Original_Longitude", DbType = "Float")] System.Nullable<double> original_Longitude, [Parameter(Name = "Original_Width", DbType = "Int")] System.Nullable<int> original_Width, [Parameter(Name = "Original_Height", DbType = "Int")] System.Nullable<int> original_Height, [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date, [Parameter(Name = "Original_Ready", DbType = "Bit")] System.Nullable<bool> original_Ready, [Parameter(Name = "Original_Completed", DbType = "Bit")] System.Nullable<bool> original_Completed)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), original_pkGame, original_User, original_Latitude, original_Longitude, original_Width, original_Height, original_Date, original_Ready, original_Completed);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameDeviceDeleteCommand")]
        [return: Parameter(DbType = "Int")]
        public int GameDeviceDeleteCommand([Parameter(Name = "Original_pkGameDevice", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGameDevice, [Parameter(Name = "Original_idGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idGame, [Parameter(Name = "Original_idLastState", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idLastState, [Parameter(Name = "Original_Device", DbType = "NVarChar(50)")] string original_Device, [Parameter(Name = "Original_User", DbType = "NVarChar(50)")] string original_User, [Parameter(Name = "Original_Latitude", DbType = "Float")] System.Nullable<double> original_Latitude, [Parameter(Name = "Original_Longitude", DbType = "Float")] System.Nullable<double> original_Longitude, [Parameter(Name = "Original_Accepted", DbType = "Bit")] System.Nullable<bool> original_Accepted, [Parameter(Name = "Original_Ready", DbType = "Bit")] System.Nullable<bool> original_Ready, [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), original_pkGameDevice, original_idGame, original_idLastState, original_Device, original_User, original_Latitude, original_Longitude, original_Accepted, original_Ready, original_Date);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameDeviceInsertCommand")]
        public ISingleResult<GameDeviceInsertCommandResult> GameDeviceInsertCommand([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGameDevice, [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idGame, [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idLastState, [Parameter(Name = "Device", DbType = "NVarChar(50)")] string device, [Parameter(Name = "User", DbType = "NVarChar(50)")] string user, [Parameter(Name = "Latitude", DbType = "Float")] System.Nullable<double> latitude, [Parameter(Name = "Longitude", DbType = "Float")] System.Nullable<double> longitude, [Parameter(Name = "Accepted", DbType = "Bit")] System.Nullable<bool> accepted, [Parameter(Name = "Ready", DbType = "Bit")] System.Nullable<bool> ready, [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGameDevice, idGame, idLastState, device, user, latitude, longitude, accepted, ready, date);
            return ((ISingleResult<GameDeviceInsertCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameDeviceSelectCommand")]
        public ISingleResult<GameDeviceSelectCommandResult> GameDeviceSelectCommand()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<GameDeviceSelectCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameDeviceUpdateCommand")]
        public ISingleResult<GameDeviceUpdateCommandResult> GameDeviceUpdateCommand(
                    [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGameDevice,
                    [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idGame,
                    [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idLastState,
                    [Parameter(Name = "Device", DbType = "NVarChar(50)")] string device,
                    [Parameter(Name = "User", DbType = "NVarChar(50)")] string user,
                    [Parameter(Name = "Latitude", DbType = "Float")] System.Nullable<double> latitude,
                    [Parameter(Name = "Longitude", DbType = "Float")] System.Nullable<double> longitude,
                    [Parameter(Name = "Accepted", DbType = "Bit")] System.Nullable<bool> accepted,
                    [Parameter(Name = "Ready", DbType = "Bit")] System.Nullable<bool> ready,
                    [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date,
                    [Parameter(Name = "Original_pkGameDevice", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGameDevice,
                    [Parameter(Name = "Original_idGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idGame,
                    [Parameter(Name = "Original_idLastState", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idLastState,
                    [Parameter(Name = "Original_Device", DbType = "NVarChar(50)")] string original_Device,
                    [Parameter(Name = "Original_User", DbType = "NVarChar(50)")] string original_User,
                    [Parameter(Name = "Original_Latitude", DbType = "Float")] System.Nullable<double> original_Latitude,
                    [Parameter(Name = "Original_Longitude", DbType = "Float")] System.Nullable<double> original_Longitude,
                    [Parameter(Name = "Original_Accepted", DbType = "Bit")] System.Nullable<bool> original_Accepted,
                    [Parameter(Name = "Original_Ready", DbType = "Bit")] System.Nullable<bool> original_Ready,
                    [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGameDevice, idGame, idLastState, device, user, latitude, longitude, accepted, ready, date, original_pkGameDevice, original_idGame, original_idLastState, original_Device, original_User, original_Latitude, original_Longitude, original_Accepted, original_Ready, original_Date);
            return ((ISingleResult<GameDeviceUpdateCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameInsertCommand")]
        public ISingleResult<GameInsertCommandResult> GameInsertCommand([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGame, [Parameter(Name = "User", DbType = "NVarChar(50)")] string user, [Parameter(Name = "MapData", DbType = "VarBinary(MAX)")] System.Data.Linq.Binary mapData, [Parameter(Name = "Latitude", DbType = "Float")] System.Nullable<double> latitude, [Parameter(Name = "Longitude", DbType = "Float")] System.Nullable<double> longitude, [Parameter(Name = "Width", DbType = "Int")] System.Nullable<int> width, [Parameter(Name = "Height", DbType = "Int")] System.Nullable<int> height, [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name = "Ready", DbType = "Bit")] System.Nullable<bool> ready, [Parameter(Name = "Completed", DbType = "Bit")] System.Nullable<bool> completed)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGame, user, mapData, latitude, longitude, width, height, date, ready, completed);
            return ((ISingleResult<GameInsertCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameSelectCommand")]
        public ISingleResult<GameSelectCommandResult> GameSelectCommand()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<GameSelectCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameStateDeleteCommand")]
        [return: Parameter(DbType = "Int")]
        public int GameStateDeleteCommand([Parameter(Name = "Original_pkGameState", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGameState, [Parameter(Name = "Original_idGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idGame, [Parameter(Name = "Original_Device", DbType = "NVarChar(50)")] string original_Device, [Parameter(Name = "Original_Master", DbType = "Bit")] System.Nullable<bool> original_Master, [Parameter(Name = "Original_Received", DbType = "Bit")] System.Nullable<bool> original_Received, [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date, [Parameter(Name = "Original_Active", DbType = "Bit")] System.Nullable<bool> original_Active)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), original_pkGameState, original_idGame, original_Device, original_Master, original_Received, original_Date, original_Active);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameStateInsertCommand")]
        public ISingleResult<GameStateInsertCommandResult> GameStateInsertCommand([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGameState, [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idGame, [Parameter(Name = "Device", DbType = "NVarChar(50)")] string device, [Parameter(Name = "Master", DbType = "Bit")] System.Nullable<bool> master, [Parameter(Name = "Data", DbType = "VarBinary(MAX)")] System.Data.Linq.Binary data, [Parameter(Name = "Received", DbType = "Bit")] System.Nullable<bool> received, [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name = "Active", DbType = "Bit")] System.Nullable<bool> active)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGameState, idGame, device, master, data, received, date, active);
            return ((ISingleResult<GameStateInsertCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameStateSelectCommand")]
        public ISingleResult<GameStateSelectCommandResult> GameStateSelectCommand()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<GameStateSelectCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameStateUpdateCommand")]
        public ISingleResult<GameStateUpdateCommandResult> GameStateUpdateCommand([Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGameState, [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> idGame, [Parameter(Name = "Device", DbType = "NVarChar(50)")] string device, [Parameter(Name = "Master", DbType = "Bit")] System.Nullable<bool> master, [Parameter(Name = "Data", DbType = "VarBinary(MAX)")] System.Data.Linq.Binary data, [Parameter(Name = "Received", DbType = "Bit")] System.Nullable<bool> received, [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name = "Active", DbType = "Bit")] System.Nullable<bool> active, [Parameter(Name = "Original_pkGameState", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGameState, [Parameter(Name = "Original_idGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_idGame, [Parameter(Name = "Original_Device", DbType = "NVarChar(50)")] string original_Device, [Parameter(Name = "Original_Master", DbType = "Bit")] System.Nullable<bool> original_Master, [Parameter(Name = "Original_Received", DbType = "Bit")] System.Nullable<bool> original_Received, [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date, [Parameter(Name = "Original_Active", DbType = "Bit")] System.Nullable<bool> original_Active)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGameState, idGame, device, master, data, received, date, active, original_pkGameState, original_idGame, original_Device, original_Master, original_Received, original_Date, original_Active);
            return ((ISingleResult<GameStateUpdateCommandResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.GameUpdateCommand")]
        public ISingleResult<GameUpdateCommandResult> GameUpdateCommand(
                    [Parameter(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pkGame,
                    [Parameter(Name = "User", DbType = "NVarChar(50)")] string user,
                    [Parameter(Name = "MapData", DbType = "VarBinary(MAX)")] System.Data.Linq.Binary mapData,
                    [Parameter(Name = "Latitude", DbType = "Float")] System.Nullable<double> latitude,
                    [Parameter(Name = "Longitude", DbType = "Float")] System.Nullable<double> longitude,
                    [Parameter(Name = "Width", DbType = "Int")] System.Nullable<int> width,
                    [Parameter(Name = "Height", DbType = "Int")] System.Nullable<int> height,
                    [Parameter(Name = "Date", DbType = "DateTime")] System.Nullable<System.DateTime> date,
                    [Parameter(Name = "Ready", DbType = "Bit")] System.Nullable<bool> ready,
                    [Parameter(Name = "Completed", DbType = "Bit")] System.Nullable<bool> completed,
                    [Parameter(Name = "Original_pkGame", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> original_pkGame,
                    [Parameter(Name = "Original_User", DbType = "NVarChar(50)")] string original_User,
                    [Parameter(Name = "Original_Latitude", DbType = "Float")] System.Nullable<double> original_Latitude,
                    [Parameter(Name = "Original_Longitude", DbType = "Float")] System.Nullable<double> original_Longitude,
                    [Parameter(Name = "Original_Width", DbType = "Int")] System.Nullable<int> original_Width,
                    [Parameter(Name = "Original_Height", DbType = "Int")] System.Nullable<int> original_Height,
                    [Parameter(Name = "Original_Date", DbType = "DateTime")] System.Nullable<System.DateTime> original_Date,
                    [Parameter(Name = "Original_Ready", DbType = "Bit")] System.Nullable<bool> original_Ready,
                    [Parameter(Name = "Original_Completed", DbType = "Bit")] System.Nullable<bool> original_Completed)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pkGame, user, mapData, latitude, longitude, width, height, date, ready, completed, original_pkGame, original_User, original_Latitude, original_Longitude, original_Width, original_Height, original_Date, original_Ready, original_Completed);
            return ((ISingleResult<GameUpdateCommandResult>)(result.ReturnValue));
        }
    }

    [Table(Name = "dbo.gameDevices")]
    public partial class GameDevice : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _PkGameDevice;

        private System.Guid _IdGame;

        private System.Guid _IdLastState;

        private string _Device;

        private string _User;

        private double _Latitude;

        private double _Longitude;

        private string _LocalAddress;
        private int _LocalPort;

        private bool _Accepted;

        private bool _Ready;

        private System.DateTime _Date;

        private EntityRef<Game> _Game;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPkGameDeviceChanging(System.Guid value);
        partial void OnPkGameDeviceChanged();
        partial void OnIdGameChanging(System.Guid value);
        partial void OnIdGameChanged();
        partial void OnIdLastStateChanging(System.Guid value);
        partial void OnIdLastStateChanged();
        partial void OnDeviceChanging(string value);
        partial void OnDeviceChanged();
        partial void OnUserChanging(string value);
        partial void OnUserChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnLocalPortChanging(int value);
        partial void OnLocalPortChanged();
        partial void OnLocalAddressChanging(string value);
        partial void OnLocalAddressChanged();
        partial void OnAcceptedChanging(bool value);
        partial void OnAcceptedChanged();
        partial void OnReadyChanging(bool value);
        partial void OnReadyChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        #endregion

        public GameDevice()
        {
            this._Game = default(EntityRef<Game>);
            OnCreated();
        }

        [Column(Name = "pkGameDevice", Storage = "_PkGameDevice", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid PkGameDevice
        {
            get
            {
                return this._PkGameDevice;
            }
            set
            {
                if ((this._PkGameDevice != value))
                {
                    this.OnPkGameDeviceChanging(value);
                    this.SendPropertyChanging();
                    this._PkGameDevice = value;
                    this.SendPropertyChanged("PkGameDevice");
                    this.OnPkGameDeviceChanged();
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this.OnIdGameChanging(value);
                    this.SendPropertyChanging();
                    this._IdGame = value;
                    this.SendPropertyChanged("IdGame");
                    this.OnIdGameChanged();
                }
            }
        }

        [Column(Name = "idLastState", Storage = "_IdLastState", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid IdLastState
        {
            get
            {
                return this._IdLastState;
            }
            set
            {
                if ((this._IdLastState != value))
                {
                    this.OnIdLastStateChanging(value);
                    this.SendPropertyChanging();
                    this._IdLastState = value;
                    this.SendPropertyChanged("IdLastState");
                    this.OnIdLastStateChanged();
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this.OnDeviceChanging(value);
                    this.SendPropertyChanging();
                    this._Device = value;
                    this.SendPropertyChanged("Device");
                    this.OnDeviceChanged();
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this.OnUserChanging(value);
                    this.SendPropertyChanging();
                    this._User = value;
                    this.SendPropertyChanged("User");
                    this.OnUserChanged();
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float NOT NULL")]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float NOT NULL")]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

        [Column(Storage = "_LocalPort", DbType = "int NOT NULL")]
        public int LocalPort
        {
            get
            {
                return this._LocalPort;
            }
            set
            {
                if ((this._LocalPort != value))
                {
                    this.OnLocalPortChanging(value);
                    this.SendPropertyChanging();
                    this._LocalPort = value;
                    this.SendPropertyChanged("LocalPort");
                    this.OnLocalPortChanged();
                }
            }
        }

        [Column(Storage = "_LocalAddress", DbType = "NVarChar(128) NOT NULL")]
        public string LocalAddress
        {
            get
            {
                return this._LocalAddress;
            }
            set
            {
                if ((this._LocalAddress != value))
                {
                    this.OnLocalAddressChanging(value);
                    this.SendPropertyChanging();
                    this._LocalAddress = value;
                    this.SendPropertyChanged("LocalAddress");
                    this.OnLocalAddressChanged();
                }
            }
        }

        [Column(Storage = "_Accepted", DbType = "Bit NOT NULL")]
        public bool Accepted
        {
            get
            {
                return this._Accepted;
            }
            set
            {
                if ((this._Accepted != value))
                {
                    this.OnAcceptedChanging(value);
                    this.SendPropertyChanging();
                    this._Accepted = value;
                    this.SendPropertyChanged("Accepted");
                    this.OnAcceptedChanged();
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit NOT NULL")]
        public bool Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this.OnReadyChanging(value);
                    this.SendPropertyChanging();
                    this._Ready = value;
                    this.SendPropertyChanged("Ready");
                    this.OnReadyChanged();
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [Association(Name = "FK_gameDevices_games", Storage = "_Game", ThisKey = "IdGame", OtherKey = "PkGame", IsForeignKey = true, DeleteOnNull = true)]
        public Game Game
        {
            get
            {
                return this._Game.Entity;
            }
            set
            {
                Game previousValue = this._Game.Entity;
                if (((previousValue != value)
                            || (this._Game.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Game.Entity = null;
                        previousValue.GameDevices.Remove(this);
                    }
                    this._Game.Entity = value;
                    if ((value != null))
                    {
                        value.GameDevices.Add(this);
                        this._IdGame = value.PkGame;
                    }
                    else
                    {
                        this._IdGame = default(System.Guid);
                    }
                    this.SendPropertyChanged("Game");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.games")]
    public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _PkGame;

        private string _User;

        private string _MapData;

        private double _Latitude;

        private double _Longitude;

        private int _Width;

        private int _Height;

        private System.DateTime _Date;

        private System.Int32 _GameId;

        private bool _Ready;

        private bool _Completed;

        private EntitySet<GameDevice> _GameDevices;

        private EntitySet<GameState> _GameStates;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPkGameChanging(System.Guid value);
        partial void OnPkGameChanged();
        partial void OnUserChanging(string value);
        partial void OnUserChanged();
        partial void OnMapDataChanging(string value);
        partial void OnMapDataChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnGameIdChanging(int value);
        partial void OnGameIdChanged();
        partial void OnReadyChanging(bool value);
        partial void OnReadyChanged();
        partial void OnCompletedChanging(bool value);
        partial void OnCompletedChanged();
        #endregion

        public Game()
        {
            this._GameDevices = new EntitySet<GameDevice>(new Action<GameDevice>(this.attach_GameDevices), new Action<GameDevice>(this.detach_GameDevices));
            this._GameStates = new EntitySet<GameState>(new Action<GameState>(this.attach_GameStates), new Action<GameState>(this.detach_GameStates));
            OnCreated();
        }

        [Column(Name = "pkGame", Storage = "_PkGame", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid PkGame
        {
            get
            {
                return this._PkGame;
            }
            set
            {
                if ((this._PkGame != value))
                {
                    this.OnPkGameChanging(value);
                    this.SendPropertyChanging();
                    this._PkGame = value;
                    this.SendPropertyChanged("PkGame");
                    this.OnPkGameChanged();
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this.OnUserChanging(value);
                    this.SendPropertyChanging();
                    this._User = value;
                    this.SendPropertyChanged("User");
                    this.OnUserChanged();
                }
            }
        }

        [Column(Storage = "_MapData", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        public string MapData
        {
            get
            {
                return this._MapData;
            }
            set
            {
                if ((this._MapData != value))
                {
                    this.OnMapDataChanging(value);
                    this.SendPropertyChanging();
                    this._MapData = value;
                    this.SendPropertyChanged("MapData");
                    this.OnMapDataChanged();
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float NOT NULL")]
        public double Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float NOT NULL")]
        public double Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

        [Column(Storage = "_Width", DbType = "Int NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if ((this._Width != value))
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Storage = "_Height", DbType = "Int NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if ((this._Height != value))
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [Column(Storage = "_GameId", DbType = "int NOT NULL")]
        public System.Int32 GameId
        {
            get
            {
                return this._GameId;
            }
            set
            {
                if ((this._GameId != value))
                {
                    this.OnGameIdChanging(value);
                    this.SendPropertyChanging();
                    this._GameId = value;
                    this.SendPropertyChanged("GameId");
                    this.OnGameIdChanged();
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit NOT NULL")]
        public bool Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this.OnReadyChanging(value);
                    this.SendPropertyChanging();
                    this._Ready = value;
                    this.SendPropertyChanged("Ready");
                    this.OnReadyChanged();
                }
            }
        }

        [Column(Storage = "_Completed", DbType = "Bit NOT NULL")]
        public bool Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if ((this._Completed != value))
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging();
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }

        [Association(Name = "FK_gameDevices_games", Storage = "_GameDevices", ThisKey = "PkGame", OtherKey = "IdGame", DeleteRule = "CASCADE")]
        public EntitySet<GameDevice> GameDevices
        {
            get
            {
                return this._GameDevices;
            }
            set
            {
                this._GameDevices.Assign(value);
            }
        }

        [Association(Name = "FK_gameStates_games", Storage = "_GameStates", ThisKey = "PkGame", OtherKey = "IdGame", DeleteRule = "CASCADE")]
        public EntitySet<GameState> GameStates
        {
            get
            {
                return this._GameStates;
            }
            set
            {
                this._GameStates.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_GameDevices(GameDevice entity)
        {
            this.SendPropertyChanging();
            entity.Game = this;
        }

        private void detach_GameDevices(GameDevice entity)
        {
            this.SendPropertyChanging();
            entity.Game = null;
        }

        private void attach_GameStates(GameState entity)
        {
            this.SendPropertyChanging();
            entity.Game = this;
        }

        private void detach_GameStates(GameState entity)
        {
            this.SendPropertyChanging();
            entity.Game = null;
        }
    }

    [Table(Name = "dbo.gameStates")]
    public partial class GameState : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _PkGameState;

        private System.Guid _IdGame;

        private string _Device;

        private bool _Master;

        private System.Data.Linq.Binary _Data;

        private bool _Received;

        private System.DateTime _Date;

        private bool _Active;

        private EntityRef<Game> _Game;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPkGameStateChanging(System.Guid value);
        partial void OnPkGameStateChanged();
        partial void OnIdGameChanging(System.Guid value);
        partial void OnIdGameChanged();
        partial void OnDeviceChanging(string value);
        partial void OnDeviceChanged();
        partial void OnMasterChanging(bool value);
        partial void OnMasterChanged();
        partial void OnDataChanging(System.Data.Linq.Binary value);
        partial void OnDataChanged();
        partial void OnReceivedChanging(bool value);
        partial void OnReceivedChanged();
        partial void OnDateChanging(System.DateTime value);
        partial void OnDateChanged();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        #endregion

        public GameState()
        {
            this._Game = default(EntityRef<Game>);
            OnCreated();
        }

        [Column(Name = "pkGameState", Storage = "_PkGameState", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid PkGameState
        {
            get
            {
                return this._PkGameState;
            }
            set
            {
                if ((this._PkGameState != value))
                {
                    this.OnPkGameStateChanging(value);
                    this.SendPropertyChanging();
                    this._PkGameState = value;
                    this.SendPropertyChanged("PkGameState");
                    this.OnPkGameStateChanged();
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this.OnIdGameChanging(value);
                    this.SendPropertyChanging();
                    this._IdGame = value;
                    this.SendPropertyChanged("IdGame");
                    this.OnIdGameChanged();
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this.OnDeviceChanging(value);
                    this.SendPropertyChanging();
                    this._Device = value;
                    this.SendPropertyChanged("Device");
                    this.OnDeviceChanged();
                }
            }
        }

        [Column(Storage = "_Master", DbType = "Bit NOT NULL")]
        public bool Master
        {
            get
            {
                return this._Master;
            }
            set
            {
                if ((this._Master != value))
                {
                    this.OnMasterChanging(value);
                    this.SendPropertyChanging();
                    this._Master = value;
                    this.SendPropertyChanged("Master");
                    this.OnMasterChanged();
                }
            }
        }

        [Column(Storage = "_Data", DbType = "VarBinary(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if ((this._Data != value))
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging();
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

        [Column(Storage = "_Received", DbType = "Bit NOT NULL")]
        public bool Received
        {
            get
            {
                return this._Received;
            }
            set
            {
                if ((this._Received != value))
                {
                    this.OnReceivedChanging(value);
                    this.SendPropertyChanging();
                    this._Received = value;
                    this.SendPropertyChanged("Received");
                    this.OnReceivedChanged();
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime NOT NULL")]
        public System.DateTime Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging();
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit NOT NULL")]
        public bool Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if ((this._Active != value))
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging();
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        [Association(Name = "FK_gameStates_games", Storage = "_Game", ThisKey = "IdGame", OtherKey = "PkGame", IsForeignKey = true, DeleteOnNull = true)]
        public Game Game
        {
            get
            {
                return this._Game.Entity;
            }
            set
            {
                Game previousValue = this._Game.Entity;
                if (((previousValue != value)
                            || (this._Game.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Game.Entity = null;
                        previousValue.GameStates.Remove(this);
                    }
                    this._Game.Entity = value;
                    if ((value != null))
                    {
                        value.GameStates.Add(this);
                        this._IdGame = value.PkGame;
                    }
                    else
                    {
                        this._IdGame = default(System.Guid);
                    }
                    this.SendPropertyChanged("Game");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public partial class GameDeviceInsertCommandResult
    {

        private System.Nullable<System.Guid> _PkGameDevice;

        private System.Nullable<System.Guid> _IdGame;

        private System.Nullable<System.Guid> _IdLastState;

        private string _Device;

        private string _User;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<bool> _Accepted;

        private System.Nullable<bool> _Ready;

        private System.Nullable<System.DateTime> _Date;

        public GameDeviceInsertCommandResult()
        {
        }

        [Column(Name = "pkGameDevice", Storage = "_PkGameDevice", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameDevice
        {
            get
            {
                return this._PkGameDevice;
            }
            set
            {
                if ((this._PkGameDevice != value))
                {
                    this._PkGameDevice = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Name = "idLastState", Storage = "_IdLastState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdLastState
        {
            get
            {
                return this._IdLastState;
            }
            set
            {
                if ((this._IdLastState != value))
                {
                    this._IdLastState = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Accepted", DbType = "Bit")]
        public System.Nullable<bool> Accepted
        {
            get
            {
                return this._Accepted;
            }
            set
            {
                if ((this._Accepted != value))
                {
                    this._Accepted = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }
    }

    public partial class GameDeviceSelectCommandResult
    {

        private System.Nullable<System.Guid> _PkGameDevice;

        private System.Nullable<System.Guid> _IdGame;

        private System.Nullable<System.Guid> _IdLastState;

        private string _Device;

        private string _User;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<bool> _Accepted;

        private System.Nullable<bool> _Ready;

        private System.Nullable<System.DateTime> _Date;

        public GameDeviceSelectCommandResult()
        {
        }

        [Column(Name = "pkGameDevice", Storage = "_PkGameDevice", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameDevice
        {
            get
            {
                return this._PkGameDevice;
            }
            set
            {
                if ((this._PkGameDevice != value))
                {
                    this._PkGameDevice = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Name = "idLastState", Storage = "_IdLastState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdLastState
        {
            get
            {
                return this._IdLastState;
            }
            set
            {
                if ((this._IdLastState != value))
                {
                    this._IdLastState = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Accepted", DbType = "Bit")]
        public System.Nullable<bool> Accepted
        {
            get
            {
                return this._Accepted;
            }
            set
            {
                if ((this._Accepted != value))
                {
                    this._Accepted = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }
    }

    public partial class GameDeviceUpdateCommandResult
    {

        private System.Nullable<System.Guid> _PkGameDevice;

        private System.Nullable<System.Guid> _IdGame;

        private System.Nullable<System.Guid> _IdLastState;

        private string _Device;

        private string _User;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<bool> _Accepted;

        private System.Nullable<bool> _Ready;

        private System.Nullable<System.DateTime> _Date;

        public GameDeviceUpdateCommandResult()
        {
        }

        [Column(Name = "pkGameDevice", Storage = "_PkGameDevice", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameDevice
        {
            get
            {
                return this._PkGameDevice;
            }
            set
            {
                if ((this._PkGameDevice != value))
                {
                    this._PkGameDevice = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Name = "idLastState", Storage = "_IdLastState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdLastState
        {
            get
            {
                return this._IdLastState;
            }
            set
            {
                if ((this._IdLastState != value))
                {
                    this._IdLastState = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Accepted", DbType = "Bit")]
        public System.Nullable<bool> Accepted
        {
            get
            {
                return this._Accepted;
            }
            set
            {
                if ((this._Accepted != value))
                {
                    this._Accepted = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }
    }

    public partial class GameInsertCommandResult
    {

        private System.Nullable<System.Guid> _PkGame;

        private string _User;

        private System.Data.Linq.Binary _MapData;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<int> _Width;

        private System.Nullable<int> _Height;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Ready;

        private System.Nullable<bool> _Completed;

        public GameInsertCommandResult()
        {
        }

        [Column(Name = "pkGame", Storage = "_PkGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGame
        {
            get
            {
                return this._PkGame;
            }
            set
            {
                if ((this._PkGame != value))
                {
                    this._PkGame = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_MapData", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary MapData
        {
            get
            {
                return this._MapData;
            }
            set
            {
                if ((this._MapData != value))
                {
                    this._MapData = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Width", DbType = "Int")]
        public System.Nullable<int> Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if ((this._Width != value))
                {
                    this._Width = value;
                }
            }
        }

        [Column(Storage = "_Height", DbType = "Int")]
        public System.Nullable<int> Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if ((this._Height != value))
                {
                    this._Height = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Completed", DbType = "Bit")]
        public System.Nullable<bool> Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if ((this._Completed != value))
                {
                    this._Completed = value;
                }
            }
        }
    }

    public partial class GameSelectCommandResult
    {

        private System.Nullable<System.Guid> _PkGame;

        private string _User;

        private System.Data.Linq.Binary _MapData;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<int> _Width;

        private System.Nullable<int> _Height;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Ready;

        private System.Nullable<bool> _Completed;

        public GameSelectCommandResult()
        {
        }

        [Column(Name = "pkGame", Storage = "_PkGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGame
        {
            get
            {
                return this._PkGame;
            }
            set
            {
                if ((this._PkGame != value))
                {
                    this._PkGame = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_MapData", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary MapData
        {
            get
            {
                return this._MapData;
            }
            set
            {
                if ((this._MapData != value))
                {
                    this._MapData = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Width", DbType = "Int")]
        public System.Nullable<int> Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if ((this._Width != value))
                {
                    this._Width = value;
                }
            }
        }

        [Column(Storage = "_Height", DbType = "Int")]
        public System.Nullable<int> Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if ((this._Height != value))
                {
                    this._Height = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Completed", DbType = "Bit")]
        public System.Nullable<bool> Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if ((this._Completed != value))
                {
                    this._Completed = value;
                }
            }
        }
    }

    public partial class GameStateInsertCommandResult
    {

        private System.Nullable<System.Guid> _PkGameState;

        private System.Nullable<System.Guid> _IdGame;

        private string _Device;

        private System.Nullable<bool> _Master;

        private System.Data.Linq.Binary _Data;

        private System.Nullable<bool> _Received;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Active;

        public GameStateInsertCommandResult()
        {
        }

        [Column(Name = "pkGameState", Storage = "_PkGameState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameState
        {
            get
            {
                return this._PkGameState;
            }
            set
            {
                if ((this._PkGameState != value))
                {
                    this._PkGameState = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_Master", DbType = "Bit")]
        public System.Nullable<bool> Master
        {
            get
            {
                return this._Master;
            }
            set
            {
                if ((this._Master != value))
                {
                    this._Master = value;
                }
            }
        }

        [Column(Storage = "_Data", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if ((this._Data != value))
                {
                    this._Data = value;
                }
            }
        }

        [Column(Storage = "_Received", DbType = "Bit")]
        public System.Nullable<bool> Received
        {
            get
            {
                return this._Received;
            }
            set
            {
                if ((this._Received != value))
                {
                    this._Received = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit")]
        public System.Nullable<bool> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if ((this._Active != value))
                {
                    this._Active = value;
                }
            }
        }
    }

    public partial class GameStateSelectCommandResult
    {

        private System.Nullable<System.Guid> _PkGameState;

        private System.Nullable<System.Guid> _IdGame;

        private string _Device;

        private System.Nullable<bool> _Master;

        private System.Data.Linq.Binary _Data;

        private System.Nullable<bool> _Received;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Active;

        public GameStateSelectCommandResult()
        {
        }

        [Column(Name = "pkGameState", Storage = "_PkGameState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameState
        {
            get
            {
                return this._PkGameState;
            }
            set
            {
                if ((this._PkGameState != value))
                {
                    this._PkGameState = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_Master", DbType = "Bit")]
        public System.Nullable<bool> Master
        {
            get
            {
                return this._Master;
            }
            set
            {
                if ((this._Master != value))
                {
                    this._Master = value;
                }
            }
        }

        [Column(Storage = "_Data", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if ((this._Data != value))
                {
                    this._Data = value;
                }
            }
        }

        [Column(Storage = "_Received", DbType = "Bit")]
        public System.Nullable<bool> Received
        {
            get
            {
                return this._Received;
            }
            set
            {
                if ((this._Received != value))
                {
                    this._Received = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit")]
        public System.Nullable<bool> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if ((this._Active != value))
                {
                    this._Active = value;
                }
            }
        }
    }

    public partial class GameStateUpdateCommandResult
    {

        private System.Nullable<System.Guid> _PkGameState;

        private System.Nullable<System.Guid> _IdGame;

        private string _Device;

        private System.Nullable<bool> _Master;

        private System.Data.Linq.Binary _Data;

        private System.Nullable<bool> _Received;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Active;

        public GameStateUpdateCommandResult()
        {
        }

        [Column(Name = "pkGameState", Storage = "_PkGameState", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGameState
        {
            get
            {
                return this._PkGameState;
            }
            set
            {
                if ((this._PkGameState != value))
                {
                    this._PkGameState = value;
                }
            }
        }

        [Column(Name = "idGame", Storage = "_IdGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> IdGame
        {
            get
            {
                return this._IdGame;
            }
            set
            {
                if ((this._IdGame != value))
                {
                    this._IdGame = value;
                }
            }
        }

        [Column(Storage = "_Device", DbType = "NVarChar(50)")]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if ((this._Device != value))
                {
                    this._Device = value;
                }
            }
        }

        [Column(Storage = "_Master", DbType = "Bit")]
        public System.Nullable<bool> Master
        {
            get
            {
                return this._Master;
            }
            set
            {
                if ((this._Master != value))
                {
                    this._Master = value;
                }
            }
        }

        [Column(Storage = "_Data", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if ((this._Data != value))
                {
                    this._Data = value;
                }
            }
        }

        [Column(Storage = "_Received", DbType = "Bit")]
        public System.Nullable<bool> Received
        {
            get
            {
                return this._Received;
            }
            set
            {
                if ((this._Received != value))
                {
                    this._Received = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit")]
        public System.Nullable<bool> Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if ((this._Active != value))
                {
                    this._Active = value;
                }
            }
        }
    }

    public partial class GameUpdateCommandResult
    {

        private System.Nullable<System.Guid> _PkGame;

        private string _User;

        private System.Data.Linq.Binary _MapData;

        private System.Nullable<double> _Latitude;

        private System.Nullable<double> _Longitude;

        private System.Nullable<int> _Width;

        private System.Nullable<int> _Height;

        private System.Nullable<System.DateTime> _Date;

        private System.Nullable<bool> _Ready;

        private System.Nullable<bool> _Completed;

        public GameUpdateCommandResult()
        {
        }

        [Column(Name = "pkGame", Storage = "_PkGame", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> PkGame
        {
            get
            {
                return this._PkGame;
            }
            set
            {
                if ((this._PkGame != value))
                {
                    this._PkGame = value;
                }
            }
        }

        [Column(Storage = "_User", DbType = "NVarChar(50)")]
        public string User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }

        [Column(Storage = "_MapData", DbType = "VarBinary(MAX)", CanBeNull = true)]
        public System.Data.Linq.Binary MapData
        {
            get
            {
                return this._MapData;
            }
            set
            {
                if ((this._MapData != value))
                {
                    this._MapData = value;
                }
            }
        }

        [Column(Storage = "_Latitude", DbType = "Float")]
        public System.Nullable<double> Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if ((this._Latitude != value))
                {
                    this._Latitude = value;
                }
            }
        }

        [Column(Storage = "_Longitude", DbType = "Float")]
        public System.Nullable<double> Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if ((this._Longitude != value))
                {
                    this._Longitude = value;
                }
            }
        }

        [Column(Storage = "_Width", DbType = "Int")]
        public System.Nullable<int> Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if ((this._Width != value))
                {
                    this._Width = value;
                }
            }
        }

        [Column(Storage = "_Height", DbType = "Int")]
        public System.Nullable<int> Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if ((this._Height != value))
                {
                    this._Height = value;
                }
            }
        }

        [Column(Storage = "_Date", DbType = "DateTime")]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if ((this._Date != value))
                {
                    this._Date = value;
                }
            }
        }

        [Column(Storage = "_Ready", DbType = "Bit")]
        public System.Nullable<bool> Ready
        {
            get
            {
                return this._Ready;
            }
            set
            {
                if ((this._Ready != value))
                {
                    this._Ready = value;
                }
            }
        }

        [Column(Storage = "_Completed", DbType = "Bit")]
        public System.Nullable<bool> Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if ((this._Completed != value))
                {
                    this._Completed = value;
                }
            }
        }
    }
#pragma warning restore 1591

}